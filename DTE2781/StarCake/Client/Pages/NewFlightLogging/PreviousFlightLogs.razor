@using System.Net.Http.Json
@using StarCake.Shared.Models.ViewModels
@inject HttpClient _http
@inject ISnackbar _snackbar
@using StarCake.Client.Services
@using System.Globalization
@using StarCake.Shared
@inject AppData _appData

<MudTable FixedHeader="true" Height="30vh"
          Items="@_elements"
          Bordered="true" Striped="true" Dense="true" Hover="true" ReadOnly="true" SortLabel="Sort By">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Previous FlightLogs</MudText>
        <MudToolBarSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
    <ColGroup>
        <col style="grid-auto-flow: dense;" /> @* Pilot *@
        <col style="grid-auto-flow: dense;" /> @* LOGGED *@
        <col style="grid-auto-flow: dense;" /> @* TYPE OF OPERATION *@
        <col style="grid-auto-flow: dense;" /> @* ENTITY *@
        <col style="grid-auto-flow: dense;" /> @* TAKEOFF *@
        <col style="grid-auto-flow: dense;" /> @* COUNTRY *@
        <col style="grid-auto-flow: dense;" /> @* TAKEOFF PLACE *@
        <col style="grid-auto-flow: dense;" /> @* TAKEOFF POSITION *@
        <col style="grid-auto-flow: dense;" /> @* LANDING PLACE *@
        <col style="grid-auto-flow: dense;" /> @* LANDING POSITION *@
        <col style="width: fit-content;" /> @* FLIGHT DURATION *@
        <col style="grid-auto-flow: dense;" /> @* REMARKS *@
    </ColGroup>
    <HeaderContent>
        @*TODO: Add tooltips with info on all MudTh *@
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.UserPiloted.GetNameFormal())"><strong>Pilot</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.UserLogged.GetNameFormal())"><strong>LOGGED</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.TypeOfOperationsCommaSeparated())"><strong>TYPE OF OPERATION</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.EntityName)"><strong>ENTITY</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<FlightLogViewModel, object>(x => x.DateTakeOff)"><strong>TAKEOFF</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.CountryId)"><strong>COUNTRY</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.AddressTakeOff)"><strong>TAKEOFF PLACE</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.LatitudeTakeOff)"><strong>TAKEOFF POSITION</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.AddressLanding)"><strong>LANDING PLACE</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.LatitudeLanding)"><strong>LANDING POSITION</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.SecondsFlown)"><strong>FLIGHT DURATION</strong></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FlightLogViewModel, object>(x => x.Remarks)"><strong>REMARKS</strong></MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PILOT">@context.UserPiloted.GetNameFormal()</MudTd>
        <MudTd DataLabel="LOGGED">@context.UserLogged.GetNameFormal()</MudTd>
        <MudTd DataLabel="TYPE OF OPERATION">@context.TypeOfOperationsCommaSeparated()</MudTd>
        <MudTd DataLabel="ENTITY">@context.EntityName</MudTd>
        <MudTd DataLabel="TAKEOFF">
            @context.DateTakeOffyymmdd()
            @context.DateTakeOffClock()
        </MudTd>
        <MudTd DataLabel="COUNTRY">@GetCountryCode(context.CountryId)</MudTd>
        <MudTd DataLabel="TAKEOFF PLACE">@context.AddressTakeOff</MudTd>

        <MudTd DataLabel="TAKEOFF POSITION">
            <MudGrid Spacing="0">
                @foreach (var coordinate in new List<decimal?> {context.LatitudeTakeOff, context.LongitudeTakeOff})
                {
                    <MudItem xs="12">
                        @coordinate
                    </MudItem>
                }
            </MudGrid>
        </MudTd>
        <MudTd DataLabel="LANDING PLACE">@context.AddressTakeOff</MudTd>
        <MudTd DataLabel="LANDING POSITION">
            <MudGrid Spacing="0">
                @foreach (var coordinate in new List<decimal?> {context.LatitudeLanding, context.LongitudeLanding})
                {
                    <MudItem xs="12">
                        @coordinate
                    </MudItem>
                }
            </MudGrid>

        </MudTd>
        <MudTd DataLabel="FLIGHT DURATION">@TimeFormatting.SecondsToHMM(context.SecondsFlown)</MudTd>
        <MudTd DataLabel="REMARKS">@context.Remarks</MudTd>
    </RowTemplate>
    
</MudTable>

@code {
    private string GetCountryCode(int countryId)
    {
        return _appData.Countries.FirstOrDefault(x => x.CountryId == countryId)?.Name;
    }

    private string ImageUriInEntity(int entityId)
    {
        return AppData.CurrentUser.CurrentDepartment.Entities.FirstOrDefault(x => x.EntityId == entityId)?.ImageAsDataUriBase64();
    }

    private string CoordinatesToString(decimal? latitude, decimal? longitude)
    {
        var strLatitude = latitude.ToString();
        var strLongitude = longitude.ToString();
        return string.Join(", ", new List<string> {strLatitude, strLongitude});
    }
}


@code {
    private string _searchString = "";
    private List<FlightLogViewModel> _elements = new List<FlightLogViewModel>();
    protected override void OnInitialized()
    {
        _elements = new List<FlightLogViewModel>();
        foreach (var flightLog in AppData.CurrentUser.CurrentDepartment.Entities.Where(x=>!x.IsArchived).Select(x=>x.FlightLogs).ToList())
            _elements.AddRange(flightLog);
    }
    private bool FilterFunc(FlightLogViewModel element)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        //if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }
}