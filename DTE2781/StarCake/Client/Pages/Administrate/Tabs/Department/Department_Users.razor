@using StarCake.Client.Services
@using StarCake.Shared
@using StarCake.Shared.Models.ViewModels
@using StarCake.Client.Pages.Administrate.Modals.Entities.Users
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authorization.Infrastructure
@using Newtonsoft.Json.Serialization
@using OfficeOpenXml.FormulaParsing.Excel.Functions.Logical
@inject AppData AppData
@inject HttpClient Http
@inject IDialogService DialogService



@if (AppData.CurrentUser.CurrentDepartment.DepartmentApplicationUsers.Count < 2) //Mer enn to brukere, for den ene brukeren er Maintainer selv som ikke skal vises
{
    <MudText>No users in current department</MudText>
}
else
{
    <MudGrid Class="justify-content-center my-3">
        <!-- Active users -->
        <MudItem xs="12" md="9">
            <MudTable T="DepartmentApplicationUserViewModel" Items="@AppData.CurrentUser.CurrentDepartment.DepartmentApplicationUsers">
                <ColGroup>
                    <col style="width: 20px;"/>
                    <col style="width: 40px;"/>
                    <col style="width: 40px;"/>
                    <col style="width: 40px;"/>
                    <col style="width: 20px;"/>
                    <AuthorizeView Roles="@($"{Roles.GetOrganizationMaintainerAndUp()}")">
                        <col style="width: 20px;"/>
                    </AuthorizeView>
                    <col style="width: auto;"/>


                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <b>Status</b>
                    </MudTh>
                    <MudTh>
                        <b>Firstname</b>
                    </MudTh>
                    <MudTh>
                        <b>Lastname</b>
                    </MudTh>
                    <MudTh>
                        <b>Username</b>
                    </MudTh>
                    <MudTh>
                        <b>Department Maintainer</b>
                    </MudTh>
                    <AuthorizeView Roles="@($"{Roles.GetOrganizationMaintainerAndUp()}")">
                        <MudTh>
                            <b>Organization Maintainer</b>
                        </MudTh>
                    </AuthorizeView>
                    <MudTh>
                        <b>Active</b>
                    </MudTh>
                </HeaderContent>
                <RowTemplate Context="users">
                    @if (users.ApplicationUserId != AppData.CurrentUser.Id && !users.ApplicationUser.IsOranizationMaintainer)
                    {
                        <!-- Small changes -->
                        <!-- Show Green or red dot to show active user or not -->
                        @if (users.ApplicationUser.LockoutEnd == null)
                        {
                            <MudTd>
                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Circle" Color="Color.Success"></MudIcon>
                            </MudTd>
                        }
                        else
                        {
                            <MudTd>
                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Circle" Color="Color.Error"></MudIcon>
                            </MudTd>
                        }

                        <MudTd DataLabel="Firstname">@users.ApplicationUser.FirstName</MudTd>
                        <MudTd DataLabel="Lastname">@users.ApplicationUser.LastName</MudTd>
                        <MudTd DataLabel="Active">@users.ApplicationUser.UserName</MudTd>
                        <MudTd>
                            <MudToggleIconButton Toggled="@users.IsMaintainer"
                                                 ToggledChanged="() => OnToggledChangedDepartment(users)"
                                                 Icon="@Icons.Material.Outlined.CheckBoxOutlineBlank"
                                                 ToggledIcon="@Icons.Material.Outlined.CheckBox"
                                                 Disabled="isUserDisabled(users)"/>
                        </MudTd>
                        <AuthorizeView Roles="@($"{Roles.GetOrganizationMaintainerAndUp()}")">
                            <MudTd>
                                <MudToggleIconButton Toggled="@users.ApplicationUser.IsOranizationMaintainer"
                                                     ToggledChanged="() => OnToggledOrganizationMaintainer(users)"
                                                     Icon="@Icons.Material.Outlined.CheckBoxOutlineBlank"
                                                     ToggledIcon="@Icons.Material.Outlined.CheckBox"
                                                     Disabled="isUserDisabled(users)"/>
                            </MudTd>
                            </AuthorizeView>
                        @if (users.ApplicationUser.LockoutEnd == null)
                        {
                            <MudTd>
                                <MudButton OnClick="() => ChangeUserStatus(users.ApplicationUserId, true, users.ApplicationUser)" Variant="Variant.Text" Size="Size.Small" Color="Color.Error" Class="ma-2">Disable user</MudButton>
                            </MudTd>
                        }
                        else
                        {
                            <MudTd >
                                <MudButton OnClick="() => ChangeUserStatus(users.ApplicationUserId, false, users.ApplicationUser)" Variant="Variant.Text" Size="Size.Small" Class="ma-2">Activate user</MudButton>
                            </MudTd>
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code {
    bool _showError;
    bool _showLoading = true;

    //Use for Disable the ToggleSwitch depends by user is disabled or not.
    public bool isUserDisabled(DepartmentApplicationUserViewModel user)
    {
        return user.ApplicationUser.LockoutEnd != null;
    }
    //Update the user is Maintainer or not. 
    public async void OnToggledChangedDepartment(DepartmentApplicationUserViewModel departmentApplicationUserViewModel)
    {
        var tempViewModel = departmentApplicationUserViewModel.Clone();
        tempViewModel.IsMaintainer = !departmentApplicationUserViewModel.IsMaintainer;
        var respons = await Http.PutAsJsonAsync("api/ApplicationUserAPI/DMaintainerUpdate", tempViewModel);

        if (respons.IsSuccessStatusCode)
        {
            var responseDataDB = await respons.Content.ReadFromJsonAsync<DepartmentApplicationUserViewModel>();


            AppData.ParentRoot.ShowSnackBar(" Department maintainer status for " + departmentApplicationUserViewModel.ApplicationUser.FirstName + " is updated", Severity.Normal);
            departmentApplicationUserViewModel.IsMaintainer = responseDataDB.IsMaintainer;
            StateHasChanged();
        }
        else
        {
            AppData.ParentRoot.ShowSnackBar("Something went wrong when update the Department maintainer", Severity.Error);
        }
    }

    public async void OnToggledOrganizationMaintainer(DepartmentApplicationUserViewModel departmentApplicationUserViewModel)
    {
        var tempViewModel = departmentApplicationUserViewModel.Clone();
        tempViewModel.ApplicationUser.IsOranizationMaintainer = !departmentApplicationUserViewModel.ApplicationUser.IsOranizationMaintainer;
        var respons = await Http.PutAsJsonAsync("api/ApplicationUserAPI/OMaintainerUpdate", tempViewModel);
        if (respons.IsSuccessStatusCode)
        {
            var responseDataDB = await respons.Content.ReadFromJsonAsync<DepartmentApplicationUserViewModel>();
            departmentApplicationUserViewModel.ApplicationUser.IsOranizationMaintainer = responseDataDB.ApplicationUser.IsOranizationMaintainer;
            StateHasChanged();

            AppData.ParentRoot.ShowSnackBar("Organization maintainer status for " + departmentApplicationUserViewModel.ApplicationUser.FirstName + " is updated", Severity.Normal);
        }
        else
        {
            AppData.ParentRoot.ShowSnackBar("Something went wrong when update the Organization maintainer", Severity.Error);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            if (AppData.CurrentUser == null)
            {
                AppData.IsLoaded = true;
            }
            _showLoading = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _showError = true;
            throw;
        }
    }
    
    
    

    //MUDBLAZOR - DIALOG
    async Task ChangeUserStatus(string userId, bool disable, ApplicationUserViewModel user)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ComfirmUserDisabling_Dialog.Disable), disable);
        parameters.Add("Users", user);
        var dialog = DialogService.Show<ComfirmUserDisabling_Dialog>("Comfirm Action", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var resonse = await Http.PutAsJsonAsync("api/ApplicationUserAPI/DisableUser/" + userId, disable);

            if (resonse.IsSuccessStatusCode)
            {
                var fromDB = await resonse.Content.ReadFromJsonAsync<ApplicationUserViewModel>();
                var noe = AppData.CurrentUser.CurrentDepartment.DepartmentApplicationUsers.Where(x => x.ApplicationUserId == userId).FirstOrDefault();
                noe.ApplicationUser = fromDB;
                AppData.ParentRoot.ShowSnackBar(fromDB.FirstName + ", is " + (disable ? "disabled" : "activated"), Severity.Normal);
                StateHasChanged();
            }
            else
            {
                AppData.ParentRoot.ShowSnackBar("Something went wrong by disable/activate the user", Severity.Error);
            }
        }
    }

}