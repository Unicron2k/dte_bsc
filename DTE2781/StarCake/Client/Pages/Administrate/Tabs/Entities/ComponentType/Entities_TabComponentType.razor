@using StarCake.Shared.Models.ViewModels.Administrate
@using StarCake.Client.Services
@using StarCake.Shared
@using StarCake.Shared.Models.ViewModels
@using StarCake.Client.Pages.Administrate.Modals
@*@using StarCake.Client.Pages.Administrate.Modals.Entities.Entity*@
@using StarCake.Client.Pages.Administrate.Modals
@using StarCake.Client.Pages.Administrate.Modals.Entities
@inject HttpClient _http
@inject AppData _appData
@inject IDialogService _dialogService

<AuthorizeView Roles="@($"{Roles.GetOrganizationMaintainerAndUp()}")">
    <MudButton OnClick="AddComponentPost" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success">
        Add a component type
    </MudButton>
</AuthorizeView>


<MudTable Items="_appData.ComponentTypes" SortLabel="Sort By" Hover="true" Dense="true" Bordered="true" Striped="true">
    <HeaderContent>
        <MudTh><strong><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ComponentViewModel, object>(x => x.Name)">Name</MudTableSortLabel></strong></MudTh>
        <MudTh><strong><MudTableSortLabel SortBy="new Func<ComponentTypeViewModel, object>(x => x.IsActive)">Active</MudTableSortLabel></strong></MudTh>
        <MudTh><strong>Update</strong></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Active">
            <MudTooltip Text="@(context.IsActive?"This is active":"This not active")" Placement="Placement.Bottom" Delay="500">
                <MudToggleIconButton
                    Toggled="@context.IsActive"
                    ToggledChanged="@((bool val) => OnActiveChanged(val, context))"
                    Icon="@Icons.Material.Filled.DisabledByDefault" Color="@Color.Error"
                    ToggledIcon="@Icons.Material.Filled.Check" ToggledColor="@Color.Success"/>
            </MudTooltip>
        </MudTd>
        <MudTd><MudButton OnClick="() => ShowModalPut(context)" EndIcon="@Icons.Filled.Edit" Color="Color.Error">Update</MudButton></MudTd>
    </RowTemplate>
</MudTable>


@code {

    private async Task OnActiveChanged(bool toggled, ComponentTypeViewModel componentType)
    {
        var componenTypeToPut = componentType.Clone();
        componenTypeToPut.IsActive = toggled;
        var updated = await UpdateComponentType(componenTypeToPut);
        if (updated != null)
        {
            componentType.Update(updated);
        }

    }

    private async Task<ComponentTypeViewModel> UpdateComponentType(ComponentTypeViewModel componentTypeCache)
    {
        var response = await _http.PutAsJsonAsync("api/ComponentType/" + componentTypeCache.ComponentTypeId, componentTypeCache);
        if (response.IsSuccessStatusCode)
        {
            var componenTypeFromDb = await response.Content.ReadFromJsonAsync<ComponentTypeViewModel>();
            _appData.ParentRoot.ShowSnackBar($"Sucess, '{componenTypeFromDb.Name}' was updated", Severity.Success);
            return componenTypeFromDb;
        }
        _appData.ParentRoot.ShowSnackBar("Error, could not update component type to database!", Severity.Error);
        return null;
    }

    private async Task AddComponentPost()
    {
        var dialog = _dialogService.Show<Dialog_AddData>("Add a new Component Type");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var componentToPost = (ComponentTypeViewModel) result.Data;
            var response = await _http.PostAsJsonAsync("api/ComponentType/", componentToPost);
            if (response.IsSuccessStatusCode)
            {
                var componentReturnedFromPost = await response.Content.ReadFromJsonAsync<ComponentTypeViewModel>();
                _appData.ComponentTypes = _appData.ComponentTypes.Append(componentReturnedFromPost).ToArray();
                _appData.ParentRoot.ShowSnackBar($"Sucess component type '{componentReturnedFromPost.Name}' was added", Severity.Success);
            }
            else
            {
                _appData.ParentRoot.ShowSnackBar("Error, could not add component type to database", Severity.Error);
            }
        }
    }

    /* PUT */

    async Task ShowModalPut(ComponentTypeViewModel componentType)
    {
        var parameters = new DialogParameters()
        {
            {nameof(Dialog_UpdateData.ComponentType), componentType.Clone()}
        };
        var dialog = _dialogService.Show<Dialog_UpdateData>("Update Component Type", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var componentTypeToPut = (ComponentTypeViewModel) result.Data;
            var updated = await UpdateComponentType(componentTypeToPut);
            if (updated != null)
            {
                componentType.Update(updated);
            }
        }
    }

}