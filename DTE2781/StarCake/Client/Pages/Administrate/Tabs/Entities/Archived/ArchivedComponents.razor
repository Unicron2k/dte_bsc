@using StarCake.Shared.Models.ViewModels
@using StarCake.Shared
@using StarCake.Client.Services
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject AppData AppData
@inject IDialogService DialogService

<MudItem Class="d-flex align-center justify-center mud-width-full py-2">
    <MudBadge 
        Content="@(AppData.CurrentUser.CurrentDepartment.ArchivedComponents.Count)" 
        Color="Color.Primary"
        Overlap="false" 
        Bordered="false" 
        Class="mx-6 my-4">
        <MudText Typo="Typo.h5">
            Components
        </MudText>
    </MudBadge>
</MudItem>

<MudPaper Class="d-flex align-center justify-center mud-width-full py-4">
    <MudExpansionPanels MultiExpansion="false">
        @foreach (var componentType in AppData.ComponentTypes
            .Where(x => AppData.CurrentUser.CurrentDepartment.ArchivedComponents
                .Select(c => c.ComponentTypeId)
                .ToList().Contains(x.ComponentTypeId)).ToList())
        {
            var components = AppData.CurrentUser.CurrentDepartment.ArchivedComponents.Where(x => x.ComponentTypeId == componentType.ComponentTypeId).ToList();
            <MudExpansionPanel>
                <TitleContent>
                    <strong>@componentType.Name &#10240;</strong>
                    <MudBadge
                        Content="@(components.Count)"
                        Color="Color.Primary"/>
                </TitleContent>
                <ChildContent>
                    <MudExpansionPanels MultiExpansion="false">
                        @foreach (var component in components)
                        {
                            <MudExpansionPanel Text="@component.Name">
                                <MudList>
                                    <MudGrid Justify="Justify.Center">
                                        <AuthorizeView Roles="@($"{Roles.GetOrganizationMaintainerAndUp()}")">
                                            <MudButton
                                                OnClick="@(() => AssignComponentToEntity(component))"
                                                Variant="Variant.Filled"
                                                EndIcon="@Icons.Material.Filled.RestoreFromTrash"
                                                Color="Color.Warning"
                                                FullWidth="true">
                                                Un-archive component
                                            </MudButton>

                                            @code{

                                                async Task AssignComponentToEntity(ComponentViewModel component)
                                                {
                                                    var parameters = new DialogParameters
                                                    {
                                                        {nameof(ModalConfirmAssignComponentToEntity.Component), component}
                                                    };
                                                    var dialog = DialogService.Show<ModalConfirmAssignComponentToEntity>($"Assign {component.Name} to an Entity", parameters);
                                                    var result = await dialog.Result;
                                                    if (!result.Cancelled)
                                                        StateHasChanged();
                                                }

                                            }

                                        </AuthorizeView>
                                    </MudGrid>
                                    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>

                                    <MudPaper>
                                        <MudListItem Text="@("Manufacturer: " + AppData.Manufacturers.Where(x => x.ManufacturerId == component.ManufacturerId).Select(x => x.Name).FirstOrDefault())" Icon="@Icons.Material.Filled.Store"/>
                                        <MudListItem Text="@("Creation date: " + component.CreationDate.ToString("yyyy MMMM dd"))" Icon="@Icons.Material.Filled.CalendarToday"/>
                                        <MudListItem Text="@("Total cycles: " + component.TotalFlightCycles)" Icon="@Icons.Material.Filled.Cached"/>
                                        <MudListItem Text="@("Total flight duration: " + TimeFormatting.SecondsToHMM(component.TotalFlightDurationInSeconds))" Icon="@Icons.Material.Filled.Timelapse"/>
                                        <MudListItem Text="@("Serial number: " + component.SerialNumber)" Icon="@Icons.Material.Filled.Tag"/>
                                        <MudListItem Text="@("Cycles since last maintenance: " + component.CyclesSinceLastMaintenance)" Icon="@Icons.Material.Filled.Build"/>
                                        <MudListItem Text="@("Last maintenance date: " + component.LastMaintenanceDate.ToString("yyyy MMMM dd"))" Icon="@Icons.Material.Filled.Build"/>
                                        <MudListItem Text="@("Max cycles between maintenance: " + component.MaxCyclesBtwMaintenance)" Icon="@Icons.Material.Filled.Timeline"/>
                                        <MudListItem Text="@("Max days between maintenance: " + component.MaxDaysBtwMaintenance)" Icon="@Icons.Material.Filled.Timeline"/>
                                        <MudListItem Text="@("Max flight time between maintenance: " + TimeFormatting.SecondsToHMM(component.MaxFlightSecondsBtwMaintenance))" Icon="@Icons.Material.Filled.Timeline"/>
                                    </MudPaper>
                                </MudList>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudPaper>