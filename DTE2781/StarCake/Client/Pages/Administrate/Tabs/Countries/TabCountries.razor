@using StarCake.Shared.Models.ViewModels
@inject HttpClient _http
@inject AppData _appData
@using StarCake.Client.Services
@using StarCake.Shared
@inject IDialogService _dialogService

<AuthorizeView Roles="@($"{Roles.GetOrganizationMaintainerAndUp()}")">
    <MudButton OnClick="@(AddNewCountry)" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success">
        Add a new country
    </MudButton>
</AuthorizeView>

<MudTable Items="_appData.Countries" SortLabel="Sort By" Hover="true" Dense="true" Bordered="true" Striped="true">
    <HeaderContent>
        <MudTh><strong><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<CountryViewModel, object>(x => x.Name)">Name</MudTableSortLabel></strong></MudTh>
        <MudTh><strong><MudTableSortLabel SortBy="new Func<CountryViewModel, object>(x => x.IsActive)">Country Code</MudTableSortLabel></strong></MudTh>
        <MudTh><strong><MudTableSortLabel SortBy="new Func<CountryViewModel, object>(x => x.IsActive)">Active</MudTableSortLabel></strong></MudTh>
        <MudTh><strong>Update</strong></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Country Code">@context.CountryCode</MudTd>
        <MudTd DataLabel="Active">
            <MudTooltip Text="@(context.IsActive?"This is active":"This not active")" Placement="Placement.Bottom" Delay="500">
                <MudToggleIconButton
                    Toggled="@context.IsActive"
                    ToggledChanged="@((bool val) => OnActiveChanged(val, context))"
                    Icon="@Icons.Material.Filled.DisabledByDefault" Color="@Color.Error"
                    ToggledIcon="@Icons.Material.Filled.Check" ToggledColor="@Color.Success"/>
            </MudTooltip>
        </MudTd>
        <MudTd><MudButton OnClick="() => ShowModalPut(context)" EndIcon="@Icons.Filled.Edit" Color="Color.Error">Update</MudButton></MudTd>
    </RowTemplate>
</MudTable>

@code {
    /* POST */
    private async Task AddNewCountry()
    {
        var dialog = _dialogService.Show<ModalCountryPost>("Add a new Country");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var countryToPost = (CountryViewModel) result.Data;
            var response = await _http.PostAsJsonAsync("api/Country/", countryToPost);
            if (response.IsSuccessStatusCode)
            {
                var countryFromPost = await response.Content.ReadFromJsonAsync<CountryViewModel>();
                _appData.Countries.Add(countryFromPost);
                _appData.ParentRoot.ShowSnackBar($"Success, country '{countryFromPost.Name}' was added", Severity.Success);
            }
            else
                _appData.ParentRoot.ShowSnackBar("Error, could not add country to database", Severity.Error);
        }
    }

    /* PUT */
    private async Task ShowModalPut(CountryViewModel country)
    {
        var parameters = new DialogParameters
        {
            {nameof(ModalCountryPut.CountryToUpdate), country.Clone()}
        };
        var dialog = _dialogService.Show<ModalCountryPut>("Update country", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var countryToPut = (CountryViewModel) result.Data;
            var updated = await UpdateCountry(countryToPut);
            if (updated!=null)
                country.Update(updated);
        }
    }
    private async Task OnActiveChanged(bool toggled, CountryViewModel country)
    {
        var countryToPut = country.Clone();
        countryToPut.IsActive = toggled;
        var updated = await UpdateCountry(countryToPut);
        if (updated!=null)
            country.Update(updated);
    }
    private async Task<CountryViewModel> UpdateCountry(CountryViewModel countryCache)
    {
        var response = await _http.PutAsJsonAsync("api/Country/" + countryCache.CountryId, countryCache);
        if (response.IsSuccessStatusCode)
        {
            var countryFromDb = await response.Content.ReadFromJsonAsync<CountryViewModel>();
            _appData.ParentRoot.ShowSnackBar($"Success, '{countryFromDb.Name}' was updated", Severity.Success);
            return countryFromDb;
        }
        _appData.ParentRoot.ShowSnackBar("Error, could not update Country to database!", Severity.Error);
        return null;
    }
}